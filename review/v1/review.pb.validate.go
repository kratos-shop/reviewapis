// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: review/v1/review.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewRequestMultiError, or nil if none found.
func (m *CreateReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetUserId(); val <= 0 || val >= 9223372036854775806 {
		err := CreateReviewRequestValidationError{
			field:  "UserId",
			reason: "value must be inside range (0, 9223372036854775806)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetOrderId(); val <= 0 || val >= 9223372036854775806 {
		err := CreateReviewRequestValidationError{
			field:  "OrderId",
			reason: "value must be inside range (0, 9223372036854775806)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateReviewRequest_Score_InLookup[m.GetScore()]; !ok {
		err := CreateReviewRequestValidationError{
			field:  "Score",
			reason: "value must be in list [1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateReviewRequest_ServiceScore_InLookup[m.GetServiceScore()]; !ok {
		err := CreateReviewRequestValidationError{
			field:  "ServiceScore",
			reason: "value must be in list [1 2 3 4 5 6]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateReviewRequest_ExpressScore_InLookup[m.GetExpressScore()]; !ok {
		err := CreateReviewRequestValidationError{
			field:  "ExpressScore",
			reason: "value must be in list [1 2 3 4 5 6]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 1000 {
		err := CreateReviewRequestValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPicInfo()); l < 1 || l > 1000 {
		err := CreateReviewRequestValidationError{
			field:  "PicInfo",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVideoInfo()); l < 1 || l > 1000 {
		err := CreateReviewRequestValidationError{
			field:  "VideoInfo",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStoreId(); val <= 1 || val >= 9223372036854775806 {
		err := CreateReviewRequestValidationError{
			field:  "StoreId",
			reason: "value must be inside range (1, 9223372036854775806)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Anonymous

	if len(errors) > 0 {
		return CreateReviewRequestMultiError(errors)
	}

	return nil
}

// CreateReviewRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewRequestMultiError) AllErrors() []error { return m }

// CreateReviewRequestValidationError is the validation error returned by
// CreateReviewRequest.Validate if the designated constraints aren't met.
type CreateReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewRequestValidationError) ErrorName() string {
	return "CreateReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewRequestValidationError{}

var _CreateReviewRequest_Score_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

var _CreateReviewRequest_ServiceScore_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
	6: {},
}

var _CreateReviewRequest_ExpressScore_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
	6: {},
}

// Validate checks the field values on CreateReviewReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewReplyMultiError, or nil if none found.
func (m *CreateReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateReviewReplyMultiError(errors)
	}

	return nil
}

// CreateReviewReplyMultiError is an error wrapping multiple validation errors
// returned by CreateReviewReply.ValidateAll() if the designated constraints
// aren't met.
type CreateReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewReplyMultiError) AllErrors() []error { return m }

// CreateReviewReplyValidationError is the validation error returned by
// CreateReviewReply.Validate if the designated constraints aren't met.
type CreateReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewReplyValidationError) ErrorName() string {
	return "CreateReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewReplyValidationError{}

// Validate checks the field values on ReplyReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplyReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyReviewRequestMultiError, or nil if none found.
func (m *ReplyReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetReviewId(); val <= 0 || val >= 9223372036854775807 {
		err := ReplyReviewRequestValidationError{
			field:  "ReviewId",
			reason: "value must be inside range (0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStoreId(); val <= 0 || val >= 9223372036854775807 {
		err := ReplyReviewRequestValidationError{
			field:  "StoreId",
			reason: "value must be inside range (0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 1000 {
		err := ReplyReviewRequestValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPicInfo()); l < 1 || l > 1000 {
		err := ReplyReviewRequestValidationError{
			field:  "PicInfo",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVideoInfo()); l < 1 || l > 1000 {
		err := ReplyReviewRequestValidationError{
			field:  "VideoInfo",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReplyReviewRequestMultiError(errors)
	}

	return nil
}

// ReplyReviewRequestMultiError is an error wrapping multiple validation errors
// returned by ReplyReviewRequest.ValidateAll() if the designated constraints
// aren't met.
type ReplyReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyReviewRequestMultiError) AllErrors() []error { return m }

// ReplyReviewRequestValidationError is the validation error returned by
// ReplyReviewRequest.Validate if the designated constraints aren't met.
type ReplyReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyReviewRequestValidationError) ErrorName() string {
	return "ReplyReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReplyReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyReviewRequestValidationError{}

// Validate checks the field values on ReplyReviewResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReplyReviewResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyReviewResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyReviewRespMultiError, or nil if none found.
func (m *ReplyReviewResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyReviewResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ReplyReviewRespMultiError(errors)
	}

	return nil
}

// ReplyReviewRespMultiError is an error wrapping multiple validation errors
// returned by ReplyReviewResp.ValidateAll() if the designated constraints
// aren't met.
type ReplyReviewRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyReviewRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyReviewRespMultiError) AllErrors() []error { return m }

// ReplyReviewRespValidationError is the validation error returned by
// ReplyReviewResp.Validate if the designated constraints aren't met.
type ReplyReviewRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyReviewRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyReviewRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyReviewRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyReviewRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyReviewRespValidationError) ErrorName() string { return "ReplyReviewRespValidationError" }

// Error satisfies the builtin error interface
func (e ReplyReviewRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyReviewResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyReviewRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyReviewRespValidationError{}

// Validate checks the field values on AppealReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppealReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppealReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppealReviewRequestMultiError, or nil if none found.
func (m *AppealReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppealReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetReviewId(); val <= 0 || val >= 9223372036854775807 {
		err := AppealReviewRequestValidationError{
			field:  "ReviewId",
			reason: "value must be inside range (0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStoreId(); val <= 0 || val >= 9223372036854775807 {
		err := AppealReviewRequestValidationError{
			field:  "StoreId",
			reason: "value must be inside range (0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 1000 {
		err := AppealReviewRequestValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPicInfo()); l < 1 || l > 1000 {
		err := AppealReviewRequestValidationError{
			field:  "PicInfo",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVideoInfo()); l < 1 || l > 1000 {
		err := AppealReviewRequestValidationError{
			field:  "VideoInfo",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppealReviewRequestMultiError(errors)
	}

	return nil
}

// AppealReviewRequestMultiError is an error wrapping multiple validation
// errors returned by AppealReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type AppealReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppealReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppealReviewRequestMultiError) AllErrors() []error { return m }

// AppealReviewRequestValidationError is the validation error returned by
// AppealReviewRequest.Validate if the designated constraints aren't met.
type AppealReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppealReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppealReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppealReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppealReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppealReviewRequestValidationError) ErrorName() string {
	return "AppealReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppealReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppealReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppealReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppealReviewRequestValidationError{}

// Validate checks the field values on AppealReviewReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppealReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppealReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppealReviewReplyMultiError, or nil if none found.
func (m *AppealReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AppealReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AppealReviewReplyMultiError(errors)
	}

	return nil
}

// AppealReviewReplyMultiError is an error wrapping multiple validation errors
// returned by AppealReviewReply.ValidateAll() if the designated constraints
// aren't met.
type AppealReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppealReviewReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppealReviewReplyMultiError) AllErrors() []error { return m }

// AppealReviewReplyValidationError is the validation error returned by
// AppealReviewReply.Validate if the designated constraints aren't met.
type AppealReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppealReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppealReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppealReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppealReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppealReviewReplyValidationError) ErrorName() string {
	return "AppealReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AppealReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppealReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppealReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppealReviewReplyValidationError{}

// Validate checks the field values on OperationAppealReviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperationAppealReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationAppealReviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationAppealReviewRequestMultiError, or nil if none found.
func (m *OperationAppealReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationAppealReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetAppealId(); val <= 0 || val >= 9223372036854775807 {
		err := OperationAppealReviewRequestValidationError{
			field:  "AppealId",
			reason: "value must be inside range (0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetReviewId(); val <= 0 || val >= 9223372036854775807 {
		err := OperationAppealReviewRequestValidationError{
			field:  "ReviewId",
			reason: "value must be inside range (0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStoreId(); val <= 0 || val >= 9223372036854775807 {
		err := OperationAppealReviewRequestValidationError{
			field:  "StoreId",
			reason: "value must be inside range (0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStatus(); val <= 0 || val >= 50 {
		err := OperationAppealReviewRequestValidationError{
			field:  "Status",
			reason: "value must be inside range (0, 50)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAppealReason()); l < 1 || l > 1000 {
		err := OperationAppealReviewRequestValidationError{
			field:  "AppealReason",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OperationAppealReviewRequestMultiError(errors)
	}

	return nil
}

// OperationAppealReviewRequestMultiError is an error wrapping multiple
// validation errors returned by OperationAppealReviewRequest.ValidateAll() if
// the designated constraints aren't met.
type OperationAppealReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationAppealReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationAppealReviewRequestMultiError) AllErrors() []error { return m }

// OperationAppealReviewRequestValidationError is the validation error returned
// by OperationAppealReviewRequest.Validate if the designated constraints
// aren't met.
type OperationAppealReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationAppealReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationAppealReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationAppealReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationAppealReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationAppealReviewRequestValidationError) ErrorName() string {
	return "OperationAppealReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OperationAppealReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationAppealReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationAppealReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationAppealReviewRequestValidationError{}

// Validate checks the field values on OperationAppealReviewReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperationAppealReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationAppealReviewReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationAppealReviewReplyMultiError, or nil if none found.
func (m *OperationAppealReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationAppealReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return OperationAppealReviewReplyMultiError(errors)
	}

	return nil
}

// OperationAppealReviewReplyMultiError is an error wrapping multiple
// validation errors returned by OperationAppealReviewReply.ValidateAll() if
// the designated constraints aren't met.
type OperationAppealReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationAppealReviewReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationAppealReviewReplyMultiError) AllErrors() []error { return m }

// OperationAppealReviewReplyValidationError is the validation error returned
// by OperationAppealReviewReply.Validate if the designated constraints aren't met.
type OperationAppealReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationAppealReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationAppealReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationAppealReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationAppealReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationAppealReviewReplyValidationError) ErrorName() string {
	return "OperationAppealReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OperationAppealReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationAppealReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationAppealReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationAppealReviewReplyValidationError{}
